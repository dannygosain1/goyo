// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: data.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct GoYoData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var xAccel: Int32 {
    get {return _xAccel ?? 0}
    set {_xAccel = newValue}
  }
  /// Returns true if `xAccel` has been explicitly set.
  var hasXAccel: Bool {return self._xAccel != nil}
  /// Clears the value of `xAccel`. Subsequent reads from it will return its default value.
  mutating func clearXAccel() {self._xAccel = nil}

  var yAccel: Int32 {
    get {return _yAccel ?? 0}
    set {_yAccel = newValue}
  }
  /// Returns true if `yAccel` has been explicitly set.
  var hasYAccel: Bool {return self._yAccel != nil}
  /// Clears the value of `yAccel`. Subsequent reads from it will return its default value.
  mutating func clearYAccel() {self._yAccel = nil}

  var zAccel: Int32 {
    get {return _zAccel ?? 0}
    set {_zAccel = newValue}
  }
  /// Returns true if `zAccel` has been explicitly set.
  var hasZAccel: Bool {return self._zAccel != nil}
  /// Clears the value of `zAccel`. Subsequent reads from it will return its default value.
  mutating func clearZAccel() {self._zAccel = nil}

  var fsr: Int32 {
    get {return _fsr ?? 0}
    set {_fsr = newValue}
  }
  /// Returns true if `fsr` has been explicitly set.
  var hasFsr: Bool {return self._fsr != nil}
  /// Clears the value of `fsr`. Subsequent reads from it will return its default value.
  mutating func clearFsr() {self._fsr = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _xAccel: Int32? = nil
  fileprivate var _yAccel: Int32? = nil
  fileprivate var _zAccel: Int32? = nil
  fileprivate var _fsr: Int32? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension GoYoData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GoYoData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "x_accel"),
    2: .standard(proto: "y_accel"),
    3: .standard(proto: "z_accel"),
    4: .same(proto: "fsr"),
  ]

  public var isInitialized: Bool {
    if self._xAccel == nil {return false}
    if self._yAccel == nil {return false}
    if self._zAccel == nil {return false}
    if self._fsr == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._xAccel)
      case 2: try decoder.decodeSingularInt32Field(value: &self._yAccel)
      case 3: try decoder.decodeSingularInt32Field(value: &self._zAccel)
      case 4: try decoder.decodeSingularInt32Field(value: &self._fsr)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._xAccel {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._yAccel {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._zAccel {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._fsr {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: GoYoData) -> Bool {
    if self._xAccel != other._xAccel {return false}
    if self._yAccel != other._yAccel {return false}
    if self._zAccel != other._zAccel {return false}
    if self._fsr != other._fsr {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
